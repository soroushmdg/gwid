j = Un1,
x = 1
)
if (ncol(profile[[j]]) < length(gwas$snp.pos)) {
if (min(Un1) > 1) {
mytemp <- Matrix(0, nrow = nrow(profile[[j]]), ncol = (min(Un1) - 1))
profile[[j]] <- cbind(mytemp, profile[[j]])
}
if (max(Un1) < length(gwas$snp.pos)) {
mytemp <- Matrix(0, nrow = nrow(profile[[j]]), ncol = (length(gwas$snp.pos) - max(Un1)))
profile[[j]] <- cbind(profile[[j]], mytemp)
}
profile[[j]] <- methods::as(profile[[j]], "sparseMatrix")
}
}
names(profile) <- names(ind) <- names(gwas[["caco"]])
class(profile) <- "profile"
output <- list(profile = profile, IND = ind)
output$snp_pos <- gwas[["snp.pos"]]
output$ibd <- ibd
class(output) <- "gwid"
if (gwid_generator) {
output$res <- extract(output)
}
return(output)
}
myregion2_temp <- build_gwid_modify(gwid = obj, gwas = gwas_temp)
mres <- myregion2_temp$profile$all_subj
ibd <- myregion2_temp$ibd
subj.ind <- list()
subjind1 <- (ibd[,V1])
subjind2 <- (ibd[,V3])
caco_temp <- gwas[["caco"]]
mylength <- length(caco_temp[[reference]])
caco_temp_unlist <- unique(unlist(caco_temp, use.names = FALSE))
browser()
for (i in 1:nperm) {
cacoi <- matrix(sample(caco_temp_unlist,2*mylength),ncol=2)
indi <- list()
mresi <- list()
indi[[1]] <- which(subjind1%in%cacoi[,1] & subjind2%in%cacoi[,1])
indi[[2]] <- which(subjind1%in%cacoi[,2] & subjind2%in%cacoi[,2])
mresi[[1]] <- colSums(mres[indi[[1]],snp_indx])
mresi[[2]] <- colSums(mres[indi[[2]],snp_indx])
perm_matrix <- perm_matrix + 1*( myres_gap - matrix(mresi[[1]]-mresi[[2]],length(mresi[[1]]-mresi[[2]]),ncol(myres_gap))<= 0 )
}
perm_matrix <- cbind(snp_pos_plot,perm_matrix/nperm)
colnames(perm_matrix) <- c("snp_pos",colnames(perm_matrix)[-1])
perm_table <- data.table::as.data.table(perm_matrix)
pval <- data.table::melt(perm_table, id.vars = "snp_pos", variable.name = "case_control", value.name = "value")
class(pval) <- append("test_snps", class(pval))
return(pval)
}
serena_permutation_test.gwid(obj = ibd_data,gwas = snp_data_gds,snp_start = 117026294,
snp_end = 122613594,nperm = 10,reference = "cases" )
mylength
subjind1
mres |> dim()
mres |> range()
snp_indx
snp_indx |> typeof()
myres_gap |> dim()
perm_matrix |> dim()
perm_matrix |> range()
serena_permutation_test.gwid(obj = ibd_data,gwas = snp_data_gds,snp_start = 117026294,
snp_end = 122613594,nperm = 10,reference = "cases" )
serena_permutation_test.gwid(obj = ibd_data,gwas = snp_data_gds,snp_start = 117026294,
snp_end = 122613594,nperm = 10,reference = "cases" )
indi[[1]]
indi[[2]]
mres[1,1]
mres[indi[[1]],snp_indx]
mres[indi[[1]],snp_indx] |> dim()
mres[indi[[1]],snp_indx] |> colSums()
mres[indi[[1]],snp_indx] |> dim()
kkk <- mres[indi[[1]],snp_indx]
base::colSums(kkk)
class(kkk)
library(Matrix)
kkk |> colSums()
perm_matrix |> dim()
perm_matrix
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
serena_permutation_test.gwid(obj = ibd_data,gwas = snp_data_gds,snp_start = 117026294,
snp_end = 122613594,nperm = 10,reference = "cases" )
subjind1 |> length()
subjind2 |> length()
sourceCpp("../../Soroush/test/ghertas.cpp")
sourceCpp("../../Soroush/test/ghertas.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
k <- match(c(1:10),c(1:20))
k
k.begin()
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
library(Rcpp)
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
sourceCpp("../../Soroush/test/serena_test.cpp")
1-T
1-F
1-F+T
kkk <- c(1,2,3)
matrix(kkk,nrow=length(kkk),ncol = 6)
matrix(kkk,nrow=length(kkk),ncol = 6) < 0
matrix(kkk,nrow=length(kkk),ncol = 6) < 2
matrix(kkk,nrow=length(kkk),ncol = 6) - matrix(kkk,nrow=length(kkk),ncol = 6) < 2
(matrix(kkk,nrow=length(kkk),ncol = 6)) - (matrix(kkk,nrow=length(kkk),ncol = 6) < 2)
matrix(kkk,nrow=length(kkk),ncol = 6) < 2
1*matrix(kkk,nrow=length(kkk),ncol = 6) < 2
1*(matrix(kkk,nrow=length(kkk),ncol = 6) < 2)
library(gwid)
# install.packages("piggyback")
piggyback::pb_download(repo = "soroushmdg/gwid",
tag = "v0.0.1",
dest = tempdir())
ibd_data_file <- paste0(tempdir(), "//chr3.ibd")
genome_data_file <- paste0(tempdir(), "//chr3.gds")
phase_data_file <- paste0(tempdir(), "//chr3.vcf")
case_control_data_file <- paste0(tempdir(), "//case-cont-RA.withmap.Rda")
# case-control data
case_control <- gwid::case_control(case_control_rda = case_control_data_file)
names(case_control) #cases and controls group
summary(case_control) # in here, we only consider cases,cont1,cont2,cont3
#groups in the study
case_control$cases[1:3] # first three subject names of cases group
# read SNP data (use SNPRelate to convert it to gds) and count number of
#minor alleles
snp_data_gds <- gwid::build_gwas(gds_data = genome_data_file,
caco = case_control,
gwas_generator = TRUE)
# read SNP data (use SNPRelate to convert it to gds) and count number of
#minor alleles
snp_data_gds <- gwid::build_gwas(gds_data = genome_data_file,
caco = case_control,
gwas_generator = TRUE)
class(snp_data_gds)
names(snp_data_gds)
names(snp_data_gds)
head(snp_data_gds$snps) # it has information about counts of minor alleles
# read haplotype data (output of beagle)
haplotype_data <- gwid::build_phase(phased_vcf = phase_data_file,
caco = case_control)
# read SNP data (use SNPRelate to convert it to gds) and count number of
#minor alleles
snp_data_gds <- gwid::build_gwas(gds_data = genome_data_file,
caco = case_control,
gwas_generator = TRUE)
class(snp_data_gds)
names(snp_data_gds)
head(snp_data_gds$snps) # it has information about counts of minor alleles
# read haplotype data (output of beagle)
haplotype_data <- gwid::build_phase(phased_vcf = phase_data_file,
caco = case_control)
serena_permutation_test.gwid <- function(obj, gwas, snp_start, snp_end,
nperm = 100, reference = "cases", ...) {
if (missing(obj)) {
stop("please provide gwid object (output of function build_gwid)")
}
if (missing(gwas)) {
stop("please provide gwas object")
}
if (missing(reference)) {
stop("please provide reference group")
}
if (sum(unlist(lapply(obj, inherits, "result_snps"))) == 0) {
obj$res <- obj(obj)
}
if (missing(snp_start)) {
snp_start <- snp_pos_total[1]
}
if (missing(snp_end)) {
snp_end <- snp_pos_total[length(snp_pos_total)]
}
list_ind_result_snps <- which(unlist(lapply(obj, inherits, "result_snps")))
snp_pos <- case_control <- V1 <- V3 <- NULL
snp_pos_total <- unique(obj[[list_ind_result_snps]]$snp_pos)
snp_indx <- which(snp_pos_total >= snp_start & snp_pos_total <= snp_end)
leni <- diff(range(snp_indx)) + 1
snp_pos_plot <- snp_pos_total[snp_indx][1:leni]
temp <- obj[[list_ind_result_snps]][snp_pos %in% snp_pos_plot, ]
myres <- as.matrix(data.table::dcast(obj$res[snp_pos %in% snp_pos_plot], snp_pos ~ case_control, value.var = "value")[, -1, with = FALSE])
myres_gap <- myres[,reference] - myres
perm_matrix <- matrix(0,nrow = nrow(myres_gap),ncol = ncol(myres_gap))
gwas_temp <- gwas
gwas_temp$caco <- list(all_subj = unique(unlist(gwas_temp$caco, use.names = FALSE)))
class(gwas_temp$caco) <- class(gwas[["caco"]])
build_gwid_modify <- function(gwid = "object of class gwid", gwas = "object of class gwas", gwid_generator = TRUE) {
ibd <- gwid$ibd
V1 <- V2 <- V3 <- V4 <- V5 <- V6 <- V7 <- V8 <- V9 <- NULL
ibd <- ibd[V1 %in% unlist(unique(gwas[["caco"]])) & V3 %in% unlist(unique(gwas[["caco"]]))]
class(ibd) <- append("IBD", class(ibd))
seq2 <- Vectorize(seq.default, vectorize.args = c("from", "to"))
profile <- ind <- vector(mode = "list", length = length(gwas[["caco"]])) # list length 6
for (j in seq_along(gwas[["caco"]])) {
ind[[j]] <- which(ibd$V1 %in% gwas[["caco"]][[j]] & ibd$V3 %in% gwas[["caco"]][[j]])
a1 <- ibd[V1 %in% gwas[["caco"]][[j]] & V3 %in% gwas[["caco"]][[j]]]
a2 <- seq2(match(a1$V6, gwas$snp.pos), match(a1$V7, gwas$snp.pos))
Un1 <- unlist(a2)
profile[[j]] <- Matrix::sparseMatrix(
i = rep(seq_along(a2), lengths(a2)),
j = Un1,
x = 1
)
if (ncol(profile[[j]]) < length(gwas$snp.pos)) {
if (min(Un1) > 1) {
mytemp <- Matrix(0, nrow = nrow(profile[[j]]), ncol = (min(Un1) - 1))
profile[[j]] <- cbind(mytemp, profile[[j]])
}
if (max(Un1) < length(gwas$snp.pos)) {
mytemp <- Matrix(0, nrow = nrow(profile[[j]]), ncol = (length(gwas$snp.pos) - max(Un1)))
profile[[j]] <- cbind(profile[[j]], mytemp)
}
profile[[j]] <- methods::as(profile[[j]], "sparseMatrix")
}
}
names(profile) <- names(ind) <- names(gwas[["caco"]])
class(profile) <- "profile"
output <- list(profile = profile, IND = ind)
output$snp_pos <- gwas[["snp.pos"]]
output$ibd <- ibd
class(output) <- "gwid"
if (gwid_generator) {
output$res <- extract(output)
}
return(output)
}
myregion2_temp <- build_gwid_modify(gwid = obj, gwas = gwas_temp)
mres <- myregion2_temp$profile$all_subj
ibd <- myregion2_temp$ibd
subj.ind <- list()
subjind1 <- (ibd[,V1])
subjind2 <- (ibd[,V3])
caco_temp <- gwas[["caco"]]
mylength <- length(caco_temp[[reference]])
caco_temp_unlist <- unique(unlist(caco_temp, use.names = FALSE))
browser()
for (i in 1:nperm) {
cacoi <- matrix(sample(caco_temp_unlist,2*mylength),ncol=2)
indi <- list()
mresi <- list()
indi[[1]] <- which(subjind1%in%cacoi[,1] & subjind2%in%cacoi[,1])
indi[[2]] <- which(subjind1%in%cacoi[,2] & subjind2%in%cacoi[,2])
mresi[[1]] <- colSums(mres[indi[[1]],snp_indx])
mresi[[2]] <- colSums(mres[indi[[2]],snp_indx])
perm_matrix <- perm_matrix + 1*( myres_gap - matrix(mresi[[1]]-mresi[[2]],length(mresi[[1]]-mresi[[2]]),ncol(myres_gap))<= 0 )
}
perm_matrix <- cbind(snp_pos_plot,perm_matrix/nperm)
colnames(perm_matrix) <- c("snp_pos",colnames(perm_matrix)[-1])
perm_table <- data.table::as.data.table(perm_matrix)
pval <- data.table::melt(perm_table, id.vars = "snp_pos", variable.name = "case_control", value.name = "value")
class(pval) <- append("test_snps", class(pval))
return(pval)
}
serena_permutation_test.gwid(obj = ibd_data,gwas = snp_data_gds,snp_start = 117026294,
snp_end = 122613594,nperm = 10,reference = "cases" )
# read haplotype data (output of beagle)
haplotype_data <- gwid::build_phase(phased_vcf = phase_data_file,
caco = case_control)
# read haplotype data (output of beagle)
haplotype_data <- gwid::build_phase(phased_vcf = phase_data_file,
caco = case_control)
# read IBD data (output of Refined-IBD)
ibd_data <- gwid::build_gwid(ibd_data = ibd_data_file,
gwas = snp_data_gds)
serena_permutation_test.gwid(obj = ibd_data,gwas = snp_data_gds,snp_start = 117026294,
snp_end = 122613594,nperm = 10,reference = "cases" )
caco_temp_unlist
caco_temp_unlist |> dim()
caco_temp_unlist |> length()
cacoi
indi[[1]]
indi[[1]] |> dim()
indi[[1]] |> length()
serena_permutation_test.gwid(obj = ibd_data,gwas = snp_data_gds,snp_start = 117026294,
snp_end = 122613594,nperm = 10,reference = "cases" )
mres |> dim()
mres[indi[[1]],snp_indx] |> dim()
mres[indi[[1]],snp_indx] |> class()
mres[indi[[1]],snp_indx] |> colSums()
library(Matrix)
mres[indi[[1]],snp_indx] |> colSums()
mres[indi[[1]],snp_indx] |> colSums() |> length()
serena_permutation_test.gwid(obj = ibd_data,gwas = snp_data_gds,snp_start = 117026294,
snp_end = 122613594,nperm = 10,reference = "cases" )
caco_temp_unlist |> length()
subjind1 |> length()
subjind2 |> length()
subjind2
indi[[1]]
sourceCpp("../../Soroush/test/serena_stdsShuffle_chatgpt.cpp")
sourceCpp("../../Soroush/test/serena_stdsShuffle_chatgpt.cpp")
sourceCpp("../../Soroush/test/serena_stdsShuffle_chatgpt.cpp")
sourceCpp("../../Soroush/test/serena_stdsShuffle_chatgpt.cpp")
sourceCpp("../../Soroush/test/serena_stdsShuffle_chatgpt.cpp")
sourceCpp("../../Soroush/test/serena_stdsShuffle_chatgpt.cpp")
serena_permutation_test.gwid(obj = ibd_data,gwas = snp_data_gds,snp_start = 117026294,
snp_end = 122613594,nperm = 10,reference = "cases" )
subjind1
cacoi
snp_indx
mres |> class()
mres |> range()
perm_matrix |> dim()
perm_matrix
myres_gap
sourceCpp("../../Soroush/test/serena_final.cpp")
v <- c(1,2,3,4,5)
A <- 2.0
res <-
sapply(v, function(x){A*x})
res
twosamples::wass_test(rnorm(100),10*rnorm(100))
twosamples::wass_test(rnorm(100),10*rnorm(100)) |> summary()
twosamples::wass_test(rnorm(100),1.5*rnorm(100)) |> summary()
twosamples::wass_test(rnorm(100),1.1*rnorm(100)) |> summary()
twosamples::wass_test(rnorm(100),1.1*rnorm(100),nboots = 10^4) |> summary()
twosamples::wass_test(rnorm(100),1.4*rnorm(100),nboots = 10^4) |> summary()
twosamples::wass_test(rnorm(1000),1.4*rnorm(1000),nboots = 10^4) |> summary()
twosamples::wass_test(rnorm(1000),1.2*rnorm(1000),nboots = 10^4) |> summary()
twosamples::wass_test(rnorm(1000),1.1*rnorm(1000),nboots = 10^4) |> summary()
twosamples::wass_test(rnorm(1000),1.1*rnorm(10000),nboots = 10^4) |> summary()
twosamples::wass_test(rnorm(1000),1.1*rnorm(10000),nboots = 10^4) |> class()
methods("twosample")
?methods
methods(class="twosample")
methods(class="twosamples")
twosamples::wass_test(rnorm(1000),1.1*rnorm(10000),nboots = 10^4) |> plot()
twosamples::two_sample(rnorm(1000),1.1*rnorm(10000),nboots = 10^4) |> plot()
twosamples::two_sample(rnorm(100),1.1*rnorm(100),nboots = 10^4) |> plot()
twosamples::wass_test(rnorm(100),1.1*rnorm(100),nboots = 10^4) |> plot()
twosamples::wass_test(rnorm(100),1.1*rnorm(100),nboots = 2000) |> plot()
twosamples::two_sample(rnorm(100),1.1*rnorm(100),nboots = 2000) |> plot()
twosamples::two_sample(rnorm(100),1.2*rnorm(100),nboots = 2000) |> plot()
twosamples::two_sample(rnorm(100),1.2*rnorm(100),nboots = 5000) |> plot()
twosamples::two_sample(rnorm(100),1.2*rnorm(100),nboots = 10000) |> plot()
twosamples::two_sample(rnorm(100),1.1*rnorm(100),nboots = 10000) |> plot()
twosamples::two_sample(rnorm(100),1.1*rnorm(100),nboots = 10000) |> plot()
twosamples::two_sample(rnorm(100),1.1*rnorm(100),nboots = 10000) |> plot()
twosamples::two_sample(rnorm(100),1.1*rnorm(100),nboots = 10000) |> plot()
twosamples::two_sample(rnorm(100),1.1*rnorm(100),nboots = 10000) |> plot()
twosamples::two_sample(rnorm(1000),1.1*rnorm(100),nboots = 10000) |> plot()
twosamples::two_sample(rnorm(1000),1.1*rnorm(2000),nboots = 10000) |> plot()
twosamples::two_sample(rnorm(2000),1.1*rnorm(1000),nboots = 10000) |> plot()
twosamples::wass_test(rnorm(100),1.1*rnorm(100),nboots = 10^4) |> plot()
twosamples::wass_test(rnorm(100),1.1*rnorm(100),nboots = 10^4,p = 2) |> plot()
twosamples::wass_test(rnorm(100),1.1*rnorm(100),nboots = 10^4,p = 3) |> plot()
twosamples::wass_test(rnorm(100),1.1*rnorm(100),nboots = 10^4,p = 10) |> plot()
twosamples::wass_test(rnorm(100),1.2*rnorm(100),nboots = 10^4,p = 10) |> plot()
twosamples::wass_test(rnorm(100),1.9*rnorm(100),nboots = 10^4,p = 10) |> plot()
twosamples::wass_test(rnorm(100),1.9*rnorm(100),nboots = 10^4,p = 1) |> plot()
twosamples::wass_test(rnorm(100),1.9*rnorm(100),nboots = 10^4,p = 2) |> plot()
twosamples::wass_test(rnorm(100),1.9*rnorm(100),nboots = 10^6,p = 2) |> plot()
twosamples::wass_test(rnorm(100),1.1*rnorm(100),nboots = 10^6,p = 2) |> plot()
twosamples::wass_test(rnorm(100),1.1*rnorm(100),nboots = 10^6,p = 1) |> plot()
twosamples::wass_stat(rnorm(100),1.1*rnorm(100),nboots = 10^6,p = 1) |> plot()
twosamples::wass_stat(rnorm(100),1.1*rnorm(100),p = 1)
twosamples::wass_stat(rnorm(100),1.1*rnorm(100),p = 1)
set.seed(10);twosamples::wass_stat(rnorm(100),1.1*rnorm(100),p = 1)
set.seed(10);twosamples::wass_stat(rnorm(100),1.1*rnorm(100),p = 1)
set.seed(10);twosamples::wass_stat(rnorm(100),1.1*rnorm(100),p = 1)
set.seed(10);twosamples::wass_test(rnorm(100),1.1*rnorm(100),nboots = 10^6,p = 1)
set.seed(10);twosamples::wass_test(cbind(rnorm(100),rnorm(100)),cbind(1.1*rnorm(100),1.4*rnorm(100,1),nboots = 10^6,p = 1)
)
?rnorm
?sample
?Function
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_stdsShuffle_chatgpt.cpp")
?sample
sourceCpp("../../Soroush/test/serena_stdsShuffle_chatgpt.cpp")
sample(c("sad","asdsad","asdsad"))
sourceCpp("../../Soroush/test/serena_stdsShuffle_chatgpt.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
k <- matrix(c(0,0,1,0),nr=2) |> Matrix(sparse = T)
k
k |> class()
k <- matrix(c(0,0,1,0,1,0),nr=2) |> Matrix(sparse = T)
k
attributes(k)
methods(k)
methods(class = "dgCMatrix")
?log
?Arith
?Math
?kronecker
?`[`
showMethods("[", inherited = FALSE)
k
k[i=1]
k[i=1,]
k[i=1,,drop=F]
k[i=1,,drop=F] |> colSums()
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
Matrix::"["
Matrix::`[`
?Matrix::`[`
?Matrix::"["
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
sourceCpp("../../Soroush/test/serena_final.cpp")
k
k[1,]
k[1,drop=F]
k[1,,drop=F]
k[1,c(1,3),drop=F]
1
.libPaths()
.libPaths()
library(gwid)
.libPaths()
library(ggplot2)
install.packages("gwid")
library(gwid)
# install.packages("piggyback")
piggyback::pb_download(repo = "soroushmdg/gwid",
tag = "v0.0.1",
dest = tempdir())
ibd_data_file <- paste0(tempdir(),"//chr3.ibd")
genome_data_file <- paste0(tempdir(),"//chr3.gds")
phase_data_file <- paste0(tempdir(),"//chr3.vcf")
case_control_data_file <- paste0(tempdir(),"//case-cont-RA.withmap.Rda")
Sys.which("make")
Sys.which("gcc")
Sys.which("g++")
install.packages("jsonlite", type = "source")
pkgbuild::has_build_tools(debug = TRUE)
install.packages("roxygen2")
install.packages("tidyverse")
install.packages("data.table")
install.packages("data.table")
install.packages("plotly")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
bio_pkgs = c("SNPRelate","gdsfmt")
if (!requireNamespace(bio_pkgs, quietly = TRUE))
BiocManager::install(bio_pkgs)
library(gwid)
library(gwid)
