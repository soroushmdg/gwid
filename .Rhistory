plot(model_fisher,
y = c("cont1","cont2"),
QQplot = TRUE)
plot(model_fisher,
y = c("cont1","cont2"),
ly=FALSE,
log_transformation = TRUE)
plot(model_fisher,
y = c("cont1","cont2"),
QQplot = TRUE)
qqunif_plot<-function(pvalues,
should.thin=T, thin.obs.places=2, thin.exp.places=2,
xlab=expression(paste("Expected (",-log[10], " p-value)")),
ylab=expression(paste("Observed (",-log[10], " p-value)")),
draw.conf=TRUE, conf.points=1000, conf.col="lightgray", conf.alpha=.05,
already.transformed=FALSE, pch=20, aspect="iso", prepanel=prepanel.qqunif,
par.settings=list(superpose.symbol=list(pch=pch)), ...) {
#error checking
if (length(pvalues)==0) stop("pvalue vector is empty, can't draw plot")
if(!(class(pvalues)=="numeric" ||
(class(pvalues)=="list" && all(sapply(pvalues, class)=="numeric"))))
stop("pvalue vector is not numeric, can't draw plot")
if (any(is.na(unlist(pvalues)))) stop("pvalue vector contains NA values, can't draw plot")
if (already.transformed==FALSE) {
if (any(unlist(pvalues)==0)) stop("pvalue vector contains zeros, can't draw plot")
} else {
if (any(unlist(pvalues)<0)) stop("-log10 pvalue vector contains negative values, can't draw plot")
}
grp<-NULL
n<-1
exp.x<-c()
if(is.list(pvalues)) {
nn<-sapply(pvalues, length)
rs<-cumsum(nn)
re<-rs-nn+1
n<-min(nn)
if (!is.null(names(pvalues))) {
grp=factor(rep(names(pvalues), nn), levels=names(pvalues))
names(pvalues)<-NULL
} else {
grp=factor(rep(1:length(pvalues), nn))
}
pvo<-pvalues
pvalues<-numeric(sum(nn))
exp.x<-numeric(sum(nn))
for(i in 1:length(pvo)) {
if (!already.transformed) {
pvalues[rs[i]:re[i]] <- -log10(pvo[[i]])
exp.x[rs[i]:re[i]] <- -log10((rank(pvo[[i]], ties.method="first")-.5)/nn[i])
} else {
pvalues[rs[i]:re[i]] <- pvo[[i]]
exp.x[rs[i]:re[i]] <- -log10((nn[i]+1-rank(pvo[[i]], ties.method="first")-.5)/(nn[i]+1))
}
}
} else {
n <- length(pvalues)+1
if (!already.transformed) {
exp.x <- -log10((rank(pvalues, ties.method="first")-.5)/n)
pvalues <- -log10(pvalues)
} else {
exp.x <- -log10((n-rank(pvalues, ties.method="first")-.5)/n)
}
}
#this is a helper function to draw the confidence interval
panel.qqconf<-function(n, conf.points=1000, conf.col="gray", conf.alpha=.05, ...) {
conf.points = min(conf.points, n-1);
mpts<-matrix(nrow=conf.points*2, ncol=2)
for(i in seq(from=1, to=conf.points)) {
mpts[i,1]<- -log10((i-.5)/n)
mpts[i,2]<- -log10(qbeta(1-conf.alpha/2, i, n-i))
mpts[conf.points*2+1-i,1]<- -log10((i-.5)/n)
mpts[conf.points*2+1-i,2]<- -log10(qbeta(conf.alpha/2, i, n-i))
}
grid::grid.polygon(x=mpts[,1],y=mpts[,2], gp=grid::gpar(fill=conf.col, lty=0), default.units="native")
}
#reduce number of points to plot
if (should.thin==T) {
if (!is.null(grp)) {
thin <- unique(data.frame(pvalues = round(pvalues, thin.obs.places),
exp.x = round(exp.x, thin.exp.places),
grp=grp))
grp = thin$grp
} else {
thin <- unique(data.frame(pvalues = round(pvalues, thin.obs.places),
exp.x = round(exp.x, thin.exp.places)))
}
pvalues <- thin$pvalues
exp.x <- thin$exp.x
}
gc()
prepanel.qqunif= function(x,y,...) {
A = list()
A$xlim = range(x, y)*1.02
A$xlim[1]=0
A$ylim = A$xlim
return(A)
}
#draw the plot
lattice::xyplot(pvalues~exp.x, groups=grp, xlab=xlab, ylab=ylab, aspect=aspect,
prepanel=prepanel, scales=list(axs="i"), pch=pch,
panel = function(x, y, ...) {
if (draw.conf) {
panel.qqconf(n, conf.points=conf.points,
conf.col=conf.col, conf.alpha=conf.alpha)
};
lattice::panel.xyplot(x,y, ...);
lattice::panel.abline(0,1);
}, par.settings=par.settings, ...
)
}
my.pvalue.list<-list("Study 1"=runif(10000), "Study 2"=runif(10000,0,.90))
qqunif_plot(my.pvalue.list, auto.key=list(corner=c(.95,.05)))
my.pvalue.list<-list("Study 1"=runif(10000), "Study 2"=runif(10000,0,.90))
qqunif_plot(my.pvalue.list, auto.key=list(corner=c(.95,.05)))
??qqmath
pval <- seq(.5,1,1000)
qqunif_plot(pval)
pval <- runif(n = 1000,min = .5,max = 1)
qqunif_plot(pval)
pval <- runif(n = 1000,min = 0,max = .5)
qqunif_plot(pval)
pval <- runif(n = 1000,min = 0.5,max = .9)
pval
qqunif_plot(pval)
plot(model_fisher,
y = c("cont1","cont2"),
QQplot = TRUE,
aspect="fill")
plot(model_fisher,
y = c("cont1","cont2"),
QQplot = TRUE)
plot(model_fisher,
y = c("cont1","cont2"),
QQplot = TRUE,aspect="fill")
plot(model_fisher,
y = c("cont1","cont2"),
QQplot = TRUE)
temp <-  gwid::fisher_test(ibd_data,
case_control,
reference = "cases")
plot(temp,y = c("cont1","cont2"),QQplot = TRUE))
plot(temp,y = c("cont1","cont2"),QQplot = TRUE)
temp
model_fisher
temp[case_control%in%C("cont1")]$value |> range()
temp[case_control%in%c("cont1")]$value |> range()
cont1_pval <- temp[case_control%in%c("cont1")]$value
qqunif_plot(cont1_pval)
cont1_pval |> hist()
qqunif_plot(cont1_pval,draw.conf = F)
qqunif_plot(cont1_pval,conf.points = 10^5)
qqunif_plot(cont1_pval,conf.points = 10^2)
qqunif_plot(cont1_pval,conf.points = 1000)
qqunif_plot(cont1_pval,conf.points = 1000000)
qqunif_plot(cont1_pval,conf.alpha = .6)
qqunif_plot(cont1_pval,conf.alpha = .05)
qqunif_plot(cont1_pval,conf.alpha = .000001)
qqunif_plot(cont1_pval,conf.alpha = .000000001)
qqunif_plot(cont1_pval,conf.alpha = .000000000001)
qqunif_plot(cont1_pval,already.transformed = T)
devtools::load_all(".")
library(gwid)
devtools::load_all(".")
library(gwid)
sapply(c(1,2,3,4),length)
?is
?extends
supers <- extends("PythonInterface")
supers
fromXR <- sapply(supers,
function(what) getClassDef(what)@package == "XR")
devtools::load_all(".")
library(gwid)
?foverlaps
library(data.table)
# Example data for k1
k1 <- data.table(
CHR = c(1, 1, 2, 2),
Start = c(100, 300, 500, 700),
Stop = c(200, 400, 600, 800)
)
# Example data for k2
k2 <- data.table(
CHR = rep(1:2, each = 10),
POS = c(150, 350, 250, 450, 550, 650, 750, 850, 950, 1050, 150, 250, 350, 450, 550, 650, 750, 850, 950, 1050)
)
k1
k2
# Rename columns in k1
setnames(k1, old = c("Start", "Stop"), new = c("start", "end"))
# Set the key for k1
setkey(k1, CHR, start, end)
# Create dummy columns in k2 for the overlap join
k2[, start := POS]
k2[, end := POS]
kw
k2
# Set the key for k2
setkey(k2, CHR, start, end)
# Perform the overlap join
result <- foverlaps(k2, k1, by.x = c("CHR", "start", "end"), by.y = c("CHR", "start", "end"), type = "within")
# View the result
print(result)
# Example data for k1
k1 <- data.table(
CHR = c(1, 1, 2, 2),
Start = c(100, 300, 500, 700),
Stop = c(200, 400, 600, 800),
val = c(1,2,3,4)
)
# Example data for k2
k2 <- data.table(
CHR = rep(1:2, each = 10),
POS = c(150, 350, 250, 450, 550, 650, 750, 850, 950, 1050, 150, 250, 350, 450, 550, 650, 750, 850, 950, 1050)
)
# Rename columns in k1
setnames(k1, old = c("Start", "Stop"), new = c("start", "end"))
# Set the key for k1
setkey(k1, CHR, start, end)
# Create dummy columns in k2 for the overlap join
k2[, start := POS]
k2[, end := POS]
# Set the key for k2
setkey(k2, CHR, start, end)
# Perform the overlap join
result <- foverlaps(k2, k1, by.x = c("CHR", "start", "end"), by.y = c("CHR", "start", "end"), type = "within")
# View the result
print(result)
k1
temp <- data.table::fread(""C:\Users\soroush\Downloads\M005003_Core-24.auto.snps.sorted.alt.conform-gt.beagle5.unrelated (1).segments"")
temp <- data.table::fread("C:\Users\soroush\Downloads\M005003_Core-24.auto.snps.sorted.alt.conform-gt.beagle5.unrelated (1).segments")
temp <- data.table::fread("C:/Users/soroush/Downloads/M005003_Core-24.auto.snps.sorted.alt.conform-gt.beagle5.unrelated (1).segments")
temp
temp <- data.table::fread("C:/Users/soroush/Downloads/M005003_Core-24.auto.snps.sorted.alt.conform-gt.beagle5.unrelated (1).segments",text = T)
temp <- data.table::fread("C:/Users/soroush/Downloads/M005003_Core-24.auto.snps.sorted.alt.conform-gt.beagle5.unrelated (1).segments",header = T)
temp
temp <- data.table::fread("C:/Users/soroush/Downloads/M005003_Core-24.auto.snps.sorted.alt.conform-gt.beagle5.unrelated (1).segments",header = F)
temp
# Load necessary libraries
library(MASS)  # For ginv function
# Set up the environment
set.seed(42)
set.seed(42)
n1 <- 500  # Number of case/case pairs
n2 <- 500  # Number of control/control pairs
num_locations <- 100
# Simulated IBD counts for case/case pairs and control/control pairs
i_counts <- matrix(sample(0:1, num_locations * n1, replace = TRUE), nrow = num_locations, ncol = n1)
j_counts <- matrix(sample(0:1, num_locations * n2, replace = TRUE), nrow = num_locations, ncol = n2)
i_counts
i_counts |> dim()
j_counts |> dim()
j_counts[1:10,1:10]
# Calculate observed test statistics
observed_i <- rowSums(i_counts)
observed_j <- rowSums(j_counts)
observed_test_statistic <- observed_i - observed_j
# Perform Fisher exact test for each location and store p-values
p_values <- numeric(num_locations)
k=1
i_ibd <- sum(i_counts[k, ])
i_non_ibd <- n1 - i_ibd
j_ibd <- sum(j_counts[k, ])
j_non_ibd <- n2 - j_ibd
contingency_table <- matrix(c(i_ibd, i_non_ibd, j_ibd, j_non_ibd), nrow = 2)
i_ibd
i_non_ibd
contingency_table
fisher_test <- fisher.test(contingency_table)
p_values[k] <- fisher_test$p.value
fisher_test
# Calculate the correlation matrix of the test statistics
correlation_matrix <- cor(cbind(observed_i, observed_j))
correlation_matrix
cbind(observed_i, observed_j)
# Perform eigenvalue decomposition
eigenvalues <- eigen(correlation_matrix)$values
eigenvalues
sum(eigenvalues)
eigenvalues
eigenvalues |> sum()
1.119+.8804
eigenvalues > 1
sum(eigenvalues > 1)
eigenvalues[eigenvalues > 1]
sum(eigenvalues[eigenvalues > 1])
# Estimate M_eff using the method of Li and Ji (2005)
M_eff <- sum(eigenvalues) - sum(eigenvalues > 1) + sum(eigenvalues[eigenvalues > 1])
M_eff
cat("Estimated M_eff:", M_eff, "\n")
# Adjust for multiple testing using the Dunn-Sidak correction
alpha <- 0.05
alpha_adjusted <- 1 - (1 - alpha)^(1 / M_eff)
alpha_adjusted
k <- rnorm(100)
cor(k)
corr(k)
k <- matrix(rnorm(10),nr=10)
k
cor(k)
cor(t(k))
library(gwid)
# install.packages("piggyback")
piggyback::pb_download(repo = "soroushmdg/gwid",
tag = "v0.0.1",
dest = tempdir())
ibd_data_file <- paste0(tempdir(), "//chr3.ibd")
genome_data_file <- paste0(tempdir(), "//chr3.gds")
phase_data_file <- paste0(tempdir(), "//chr3.vcf")
case_control_data_file <- paste0(tempdir(), "//case-cont-RA.withmap.Rda")
# case-control data
case_control <- gwid::case_control(case_control_rda = case_control_data_file)
# read SNP data (use SNPRelate to convert it to gds) and count number of
#minor alleles
snp_data_gds <- gwid::build_gwas(gds_data = genome_data_file,
caco = case_control,
gwas_generator = TRUE)
# read haplotype data (output of beagle)
haplotype_data <- gwid::build_phase(phased_vcf = phase_data_file,
caco = case_control)
# read haplotype data (output of beagle)
haplotype_data <- gwid::build_phase(phased_vcf = phase_data_file,
caco = case_control)
# read IBD data (output of Refined-IBD)
ibd_data <- gwid::build_gwid(ibd_data = ibd_data_file,
gwas = snp_data_gds)
model_fisher <- gwid::fisher_test(ibd_data,
case_control,
reference = "cases",
snp_start = 117026294,
snp_end = 122613594)
model_fisher
ibd_data$profile$cases |> dim()
ibd_data$profile$cont1 |> dim()
ibd_data$profile$cont1 |> colnames()
ibd_data$profile$cont1 |> rownames()
ibd_data$snp_pos
ibd_data$snp_pos |> length()
myind <- which(ibd_data$snp_pos >117026294 &  ibd_data$snp_pos < 122613594 )
myind
x <- ibd_data$profile$cases[,myind]
x |> dim()
myind |> length()
y <- ibd_data$profile$cont1[,myind]
y |> dim()
mycor <- cor(x = x, y = y)
cor(x)
mycor <- cor(x = as.matrix(x), y = as.matrix(y))
z <- cbind(x,y)
z <- rbind(x,y)
x |> dim()
z |> dim()
mycor <- cor(z)
z
mycor <- cor(as.matrix(z))
mycor |> dim()
mycor[1:10,1:10]
val <- eigen(mycor)$value
val
val <- eigen(mycor)$values
val
M_eff <- sum(val) - sum(val > 1) + sum(val[val > 1])
M_eff
myind |> length()
va |> length()
val |> length()
mycor |> dim()
sum(val>=1)
ceiling(2.1)
floor(2.1)
sum(val > 0 )
sum(val >= 0 )
sum(val < 0 )
which(val < 0 )
val[706]
val[707]
val[763]
val[705]
val[which(val<0)] <- 0
sum(val>=1)
[val - floor(val)]
(val - floor(val))
f <- sum(val>=1) + (val - floor(val))
f
sum(f)
(val>=1)
1*(val>=1)
1*(val>=1) |> sum()
f <- 1*(val>=1) + (val - floor(val))
f
f <- 1*(val>=1) + (val - floor(val))
M_eff <- sum(val) - sum(val > 1) + sum(val[val > 1])
M_eff
1*(val>=1)
(val - floor(val))
val <- abs(eigen(mycor)$values)
val
1*(val>=1)
(val - floor(val))
f <- 1*(val>=1) + (val - floor(val))
f
M_eff <- sum(f)
M_eff
model_fisher
model_fisher[case_control=="cont1"]
M_eff
temp <- model_fisher[case_control=="cont1"][value2:=(1-(1-value)^(1/42))]
temp <- model_fisher[case_control=="cont1"][value2=(1-(1-value)^(1/42))]
temp <- model_fisher[case_control=="cont1"][,value2:=(1-(1-value)^(1/42))]
temp
temp
temp$value
temp[1:100]
temp
temp[500:600]
length(myind)
temp <- model_fisher[case_control=="cont1"][,value2:=(1-(1-value)^(1/42))][,value3:=(1-(1-value)^(1/763))]
temp
temp
k1 <- sample(c(0,1,2),size = 100,prob = c(.6,.3,.1))
k1 <- sample(c(0,1,2),size = 100,prob = c(.6,.3,.1),replace = T)
k1
var(k1)
density_est <- density(k1)
density_est
approx(density_est$x, density_est$y, xout = k1)
P_X_i <- approx(density_est$x, density_est$y, xout = k1)$y
neg_log_P_X_i <- -log(P_X_i)
expected_value <- mean(neg_log_P_X_i)
expected_value
var(k1)
empirical_prob <- table(k1) / length(k1)
empirical_prob
P_X_i <- empirical_prob[as.character(k1)]
P_X_i
neg_log_P_X_i <- -log(P_X_i)
expected_value <- mean(neg_log_P_X_i)
expected_value
empirical_prob
as.character(k1)
set.seed(123)  # For reproducibility
X_i <- sample(c(0, 1, 2), size = 100, prob = c(0.6, 0.3, 0.1), replace = TRUE)
# Calculate empirical probabilities
empirical_prob <- prop.table(table(X_i))
# Map empirical probabilities to the sample points
P_X_i <- empirical_prob[as.character(X_i)]
# Compute -log P(X_i)
neg_log_P_X_i <- -log(P_X_i)
# Calculate the expected value (mean) of -log P(X_i)
expected_value <- mean(neg_log_P_X_i)
# Print the result
cat("The expected value of -log P(X_i) is:", expected_value, "\n")
# Compare with variance of X_i
variance_X_i <- var(X_i)
# Print the variance
cat("The variance of X_i is:", variance_X_i, "\n")
# To verify if they are approximately equal (as per the given equation)
cat("Difference between variance and expected value of -log P(X_i):", abs(variance_X_i - expected_value), "\n")
# Generate sample data
set.seed(123)  # For reproducibility
X_i <- sample(c(0, 1, 2), size = 100, prob = c(0.6, 0.3, 0.1), replace = TRUE)
# Calculate empirical probabilities
empirical_prob <- prop.table(table(X_i))
# Map empirical probabilities to the sample points
P_X_i <- empirical_prob[as.character(X_i)]
# Compute -log P(X_i)
neg_log_P_X_i <- -log(P_X_i)
# Calculate the expected value (mean) of -log P(X_i)
expected_value <- mean(neg_log_P_X_i)
# Print the result
cat("The expected value of -log P(X_i) is:", expected_value, "\n")
# Compare with variance of X_i
variance_X_i <- var(X_i)
# Print the variance
cat("The variance of X_i is:", variance_X_i, "\n")
# To verify if they are approximately equal (as per the given equation)
cat("Difference between variance and expected value of -log P(X_i):", abs(variance_X_i - expected_value), "\n")
prop.table(table(X_i))
caco <- gwid::case_control(case_control_rda = "../test/case-cont-RA.withmap.Rda")
caco
pieces <- gwid::build_gwas(gds_data = "../test/chr3.gds",caco = caco,gwas_generator = TRUE)
caco <- gwid::case_control(case_control_rda = "../test/case-cont-RA.withmap.Rda")
pieces <- gwid::build_gwas(gds_data = "../test/chr3.gds",caco = caco,gwas_generator = TRUE)
myphase <- gwid::build_phase(phased_vcf = "../test/chr3.vcf",caco = caco)
myregion2 <- gwid::build_gwid(ibd_data = "../test/chr3.ibd",gwas = pieces)
fishgwas <- gwid::fisher_test(pieces,reference = "cases",snp_start = 118926294,snp_end = 122613594,alternative = "two.sided")
plot(fishgwas,title = "test_snps")
fishgwid <- gwid::fisher_test(myregion2,caco = caco,snp_start = 118926294,snp_end = 122613594,reference = "cases")
fishgwid
plot(fishgwid)
plot(fishgwid,snp_start = 118926294,snp_end = 122613594)
plot(fishgwid,snp_start = 118926294,snp_end = 122613594,log_transformation = F)
plot(fishgwid,snp_start = 118926294,snp_end = 122613594,log_transformation = T)
plot(fishgwid,snp_start = 118926294,snp_end = 122613594)
plot(fishgwid,snp_start = 118926294,snp_end = 122613594)
plot(fishgwid,snp_start = 118926294,snp_end = 122613594,log_transformation = T)
devtools::load_all(".")
library(gwid)
plot(fishgwid,snp_start = 118926294,snp_end = 122613594,log_transformation = T)\
plot(fishgwid,snp_start = 118926294,snp_end = 122613594,log_transformation = T)
caco <- gwid::case_control(case_control_rda = "../test/case-cont-RA.withmap.Rda")
pieces <- gwid::build_gwas(gds_data = "../test/chr3.gds",caco = caco,gwas_generator = TRUE)
myphase <- gwid::build_phase(phased_vcf = "../test/chr3.vcf",caco = caco)
myregion2 <- gwid::build_gwid(ibd_data = "../test/chr3.ibd",gwas = pieces)
fishgwid <- gwid::fisher_test(myregion2,caco = caco,snp_start = 118926294,snp_end = 122613594,reference = "cases")
plot(fishgwid,snp_start = 118926294,snp_end = 122613594)
plot(fishgwid,snp_start = 118926294,snp_end = 122613594,log_transformation = F)
plot(fishgwid,snp_start = 118926294,snp_end = 122613594,log_transformation = T)
plot(fishgwid,snp_start = 118926294,snp_end = 122613594,log_transformation = TRUE)
plot(fishgwid,snp_start = 118926294,snp_end = 122613594)
plot(fishgwid,snp_start = 118926294,snp_end = 122613594)
library(gwid)
