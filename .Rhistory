kkk$hap_freq |> class()
kkk$hap_most_freq |> class()
plot(kkk,plot_type = "haplotype_structure_frequency",nwin = 200,type = "version1",ly=F,line_size = 10)
library(gwid)
plot(kkk,plot_type = "haplotype_structure_frequency",nwin = 200,type = "version1",ly=F,line_size = 1)
kkk <- myhapfreq
kkk$hap_freq <- kkk$hap_freq[case_control %in% c("cases","cont2")]
plot(kkk,plot_type = "haplotype_structure_frequency",nwin = 200,type = "version1",ly=F,line_size = 1)
kkk <- myhapfreq
kkk$hap_freq <- kkk$hap_freq[case_control %in% c("cases","cont3")]
plot(kkk,plot_type = "haplotype_structure_frequency",nwin = 200,type = "version1",ly=F,line_size = 1)
plot(kkk,plot_type = "haplotype_structure_frequency",nwin = 200,type = "version2",ly=F,line_size = 1)
library(gwid)
devtools::check(remote = TRUE, manual = TRUE)
devtools::submit_cran()
library(gwid)
devtools::check(remote = TRUE, manual = TRUE)
devtools::submit_cran()
library(gwid)
shiny::runApp('C:/Users/soroush/OneDrive - Marquette University/Soroush/test/soroush_draftibd')
shiny::runApp('C:/Users/soroush/OneDrive - Marquette University/Soroush/test/soroush_draftibd')
runApp('C:/Users/soroush/OneDrive - Marquette University/Soroush/test/soroush_draftibd')
runApp('C:/Users/soroush/OneDrive - Marquette University/Soroush/test/soroush_draftibd')
runApp('C:/Users/soroush/OneDrive - Marquette University/Soroush/test/soroush_draftibd')
runApp('C:/Users/soroush/OneDrive - Marquette University/Soroush/test/soroush_draftibd')
values$pieces[["snp.pos"]]
sum(values$pieces[["snp.pos"]] >= input$pos[1] & values$pieces[["snp.pos"]] <= input$pos[2])
len
values$myprofile
input$res_choice
class(values$myprofile)
values |> length()
names(values)
plot(values$myprofile,plot_type = "profile",reference = input$res_choice)
Q
setwd("C:/Users/soroush/OneDrive - Marquette University/Soroush/test")
caco <- gwid::case_control(case_control_rda = "../test/case-cont-RA.withmap.Rda")
class(caco)
pieces <- gwid::build_gwas(gds_data = "../test/chr3.gds",caco = caco,gwas_generator = TRUE)
class(pieces)
printList(pieces)
print(pieces,quote = T)
which(unlist(lapply(pieces, inherits,"result_snps")))
plot(pieces,title = "gwas plot")
plot(pieces,title = "gwas plot",snp_start = 118926294,snp_end = 122613594)
ag.pieces <- gwid::extract(pieces)
ag.pieces_filter <- gwid::extract(pieces,type = "snps",snp_start = 118926294,snp_end = 122613594)
plot(ag.pieces,title = "another gwas")
plot(ag.pieces,title = "another gwas",snp_start = 118926294,snp_end = 122613594)
plot(ag.pieces_filter)
myphase <- gwid::build_phase(phased_vcf = "../test/chr3.vcf",caco = caco)
myregion2 <- gwid::build_gwid(ibd_data = "../test/chr3.ibd",gwas = pieces)
plot(myregion2,title = "gwid",plot_type = "result_snps")
plot(myregion2,plot_type = "profile",reference = "case1")
plot(myregion2,plot_type = "profile",reference = "case1",snp_start = 118926294,snp_end = 122613594)
plot(myregion2,plot_type = "profile",reference = "case1",snp_start = 118926294,snp_end = 122613594)
plot(myregion2,"cases",plot_type = "profile")
plot(myregion2,plot_type = "profile")
plot(myregion2,plot_type = "profile",reference = "cases")
plot(myregion2,plot_type = "profile",reference = "cases",snp_start = 118926294,snp_end = 122613594)
gc()
plot(myregion2,plot_type = "profile",reference = "cases",snp_start = 118926294,snp_end = 122613594)
kkk <- plot(myregion2,plot_type = "profile",reference = "cases",snp_start = 118926294,snp_end = 122613594)
object.size(kkk)/10^6
kkk
gc()
caco <- gwid::case_control(case_control_rda = "../test/case-cont-RA.withmap.Rda")
pieces <- gwid::build_gwas(gds_data = "../test/chr3.gds",caco = caco,gwas_generator = TRUE)
ag.pieces <- gwid::extract(pieces)
myphase <- gwid::build_phase(phased_vcf = "../test/chr3.vcf",caco = caco)
myregion2 <- gwid::build_gwid(ibd_data = "../test/chr3.ibd",gwas = pieces)
#myprofile_without_selection <- gwid::subset(myregion2)
myprofile_without_selection2 <- gwid::subset(myregion2,snp_start = pieces$snp.pos[1],snp_end = pieces$snp.pos[length(pieces$snp.pos)])
myprofile <- gwid::subset(myregion2,snp_start = 118926294,snp_end = 122613594)
gc()
gc()
rm(myprofile_without_selection2)
gc()
#myprofile_without_selection <- gwid::subset(myregion2)
#myprofile_without_selection2 <- gwid::subset(myregion2,snp_start = pieces$snp.pos[1],snp_end = pieces$snp.pos[length(pieces$snp.pos)])
myprofile <- gwid::subset(myregion2,snp_start = 118926294,snp_end = 122613594)
class(myprofile)
class(myregion2)
plot(myprofile)
plot(myprofile,plot_type = "profile",reference = "cases")
gwid_temp_filter <- gwid::extract(myregion2,snp_start = 118926294,snp_end = 122613594)
class(gwid_temp_filter)
gwid_temp_filter
library(gwid)
#myprofile_without_selection <- gwid::subset(myregion2)
#myprofile_without_selection2 <- gwid::subset(myregion2,snp_start = pieces$snp.pos[1],snp_end = pieces$snp.pos[length(pieces$snp.pos)])
myprofile <- gwid::subset(myregion2,snp_start = 118926294,snp_end = 122613594)
myprofile$Mres_reduced
myprofile$Mres_reduced$cases
myprofile$Mres_reduced$cases |> dim()
plot(myprofile)
plot(myprofile,plot_type = "profile",reference = "cases")
runApp('soroush_draftibd')
runApp('soroush_draftibd')
runApp('soroush_draftibd')
runApp('soroush_draftibd')
runApp('soroush_draftibd')
runApp('soroush_draftibd')
values$happ_freq
input$snp_win
input$snp_win
input$snp_win
input$sh_plot
runApp('soroush_draftibd')
runApp('soroush_draftibd')
runApp('soroush_draftibd')
runApp('soroush_draftibd')
runApp('soroush_draftibd')
runApp('soroush_draftibd')
runApp('soroush_draftibd')
runApp('soroush_draftibd')
?get
runApp('soroush_draftibd')
tempdir()
?write.csv
save(list(1,2,3),c(4,5,6),c(3,1,2),file = tempdir())
save(list(list(1,2,3),c(4,5,6),c(3,1,2)),file = tempdir())
list(list(1,2,3),c(4,5,6),c(3,1,2))
?save
?file.copy
runApp('soroush_draftibd')
runApp('soroush_draftibd')
tempdir()
runApp('soroush_draftibd')
runApp('soroush_draftibd')
getReactiveData <- reactive({
list(
profile = values$myprofile,
hap_str = values$hap_str,
)
})
getReactiveData <- reactive({
list(
profile = values$myprofile,
hap_str = values$hap_str,
)
})
runApp('soroush_draftibd')
kkk <- read("../../../Downloads/gwid_data_files.rda")
kkk <- load("../../../Downloads/gwid_data_files.rda")
data_to_save$profile
data_to_save$hap_str
runApp('soroush_draftibd')
kkk <- load("../../../Downloads/gwid_data_files.rda")
kkk <- readRDS("../../../Downloads/gwid_data_files.rda")
kkk$profile
kkk$hap_str
runApp('soroush_draftibd')
kkk <- readRDS("../../../Downloads/gwid_data_files.rda")
kkk <- readRDS("../../../Downloads/gwid_data_files.rda")
kkk$hap_str
kkk$hap_str_genot
kkk$happ_freq$hap_freq
setwd("C:/Users/soroush/OneDrive - Marquette University/Soroush/test")
library(devtools)
?install_github
with_libpath()
devtools::with_libpath
.libPaths()
install_github("soroushmdg/gwid",args= C:/Program Files/R/R-4.3.1/library")
install_github("soroushmdg/gwid",args= "C:/Program Files/R/R-4.3.1/library")
warnings()
setwd("C:/Users/soroush/OneDrive - Marquette University/Soroush/test")
caco <- gwid::case_control(case_control_rda = "../test/case-cont-RA.withmap.Rda")
pieces <- gwid::build_gwas(gds_data = "../test/chr3.gds",caco = caco,gwas_generator = TRUE)
ag.pieces <- gwid::extract(pieces)
myphase <- gwid::build_phase(phased_vcf = "../test/chr3.vcf",caco = caco)
myregion2 <- gwid::build_gwid(ibd_data = "../test/chr3.ibd",gwas = pieces)
class(myregion2)
myregion2$ibd |> class()
myregion2$res |> class()
myregion2$profile |> class()
myregion2$IND
myregion2$IND$cases
myregion2$ibd
#myprofile_without_selection <- gwid::subset(myregion2)
#myprofile_without_selection2 <- gwid::subset(myregion2,snp_start = pieces$snp.pos[1],snp_end = pieces$snp.pos[length(pieces$snp.pos)])
myprofile <- gwid::subset(myregion2,snp_start = 118926294,snp_end = 122613594)
myprofile |> class()
myregion2$ibd
myregion2$res
myregion2$snp_pos
myregion2$ibd
getwd()
runApp('soroush_draftibd')
runApp('soroush_draftibd')
kkk <- readRDS("../../../Downloads/gwid_data_files.rda")
kkk$profile
kkk <- readRDS("../../../Downloads/gwid_data_files.rda")
runApp('soroush_draftibd')
kkk <- readRDS("../../../Downloads/gwid_data_files.rda")
runApp('soroush_draftibd')
fishgwid
getReactiveData()
getReactiveData[[1]]
runApp('soroush_draftibd')
getReactiveData()
getReactiveData$profile
runApp('soroush_draftibd')
getReactiveData$fish_test_gwid <- fishgwid
runApp('soroush_draftibd')
runApp('soroush_draftibd')
runApp('soroush_draftibd')
runApp('soroush_draftibd')
kkk <- readRDS("../../../Downloads/gwid_data_files.rda")
runApp('soroush_draftibd')
kkk <- readRDS("../../../Downloads/gwid_data_files.rda")
kkk$fish_test_gwid
runApp('soroush_draftibd')
kkk <- readRDS("../../../Downloads/gwid_data_files.rda")
kkk$hap_str
kkk$hap_str |> class()
kkk$happ_freq
kkk$hap_str
kkk$hap_str |> names()
kkk$hap_str |> colnames()
setwd("C:/Users/soroush/OneDrive - Marquette University/Soroush/hybrid_pca")
library(fdapace)
library(ReMFPCA)
library(data.table)
library(fda)
library(ggplot2)
library(cluster)
library(factoextra)
library(gridExtra)
library(scales)
library("ggpubr")
df <- read.csv("./aoas1587suppa/code/data/HMP2_t2d.txt",sep = '\t')
colnames(df)[2] = 'SubjectUnique'
microb = df[, c('SampleID', 'SubjectUnique', 'CollectionDate', 'shannon_microb', 'CL4')] |> as.data.table(key = c('SubjectUnique','CollectionDate'))
#metab = df[, c('SampleID', 'SubjectUnique', 'CollectionDate', 'shannon_metab', 'CL4')]
protein = df[, c('SampleID', 'SubjectUnique', 'CollectionDate', 'shannon_protein', 'CL4')] |> as.data.table(key = c('SubjectUnique','CollectionDate'))
cytok = df[, c('SampleID', 'SubjectUnique', 'CollectionDate', 'shannon_cytok', 'CL4')] |> as.data.table(key = c('SubjectUnique','CollectionDate'))
a1c <- df[,c('SampleID', 'SubjectUnique', 'CollectionDate', 'A1C', 'CL4')] |> as.data.table(key = c('SubjectUnique','CollectionDate'))
microb_pace <- MakeFPCAInputs(microb$SubjectUnique,microb$CollectionDate,microb$shannon_microb)
microb_fpca <- FPCA(microb_pace$Ly,microb_pace$Lt,list(plot = TRUE, userBwCov=2,userBwMu=10,methodMuCovEst = 'smooth',nRegGrid = length(unique(microb$CollectionDate)),maxK = 30))
microb_reconstruct <- microb_fpca$xiEst %*%  t(microb_fpca$phi)# + sapply(microb_fpca$mu,function(x) rep(x,length(unique(microb$SubjectUnique))))
microb_reconstruct |> dim()
apply(microb_reconstruct,2,mean)
apply(microb_reconstruct,1,mean)
microb_reconstruct <- microb_fpca$xiEst %*%  t(microb_fpca$phi) + sapply(microb_fpca$mu,function(x) rep(x,length(unique(microb$SubjectUnique))))
apply(microb_reconstruct,1,mean)
apply(microb_reconstruct,1,mean)
apply(microb_reconstruct,2,mean)
microb_reconstruct <- microb_fpca$xiEst %*%  t(microb_fpca$phi)# + sapply(microb_fpca$mu,function(x) rep(x,length(unique(microb$SubjectUnique))))
apply(microb_reconstruct,2,mean)
apply(microb_reconstruct,1,mean)
apply(microb_reconstruct,2,mean)
apply(microb_reconstruct,1,mean)
protein_pace <- MakeFPCAInputs(protein$SubjectUnique,protein$CollectionDate,protein$shannon_protein)
protein_fpca <- FPCA(protein_pace$Ly,protein_pace$Lt,list(plot = TRUE, userBwCov=2,userBwMu=10,methodMuCovEst = 'smooth',nRegGrid = length(unique(protein$CollectionDate)),maxK = 30))
protein_reconstruct <- protein_fpca$xiEst %*%  t(protein_fpca$phi)# + sapply(protein_fpca$mu,function(x) rep(x,length(unique(protein$SubjectUnique))))
apply(protein_reconstruct,1,mean)
apply(protein_reconstruct,2,mean)
apply(protein_reconstruct,2,sd)
cytok_pace <- MakeFPCAInputs(cytok$SubjectUnique,cytok$CollectionDate,cytok$shannon_cytok)
cytok_fpca <- FPCA( cytok_pace$Ly,cytok_pace$Lt,list(plot = TRUE, userBwCov=2,userBwMu=10,methodMuCovEst = 'smooth',nRegGrid = length(unique(cytok$CollectionDate)),maxK = 30))
cytok_reconstruct <- cytok_fpca$xiEst %*%  t(cytok_fpca$phi) #+ sapply(cytok_fpca$mu,function(x) rep(x,length(unique(cytok$SubjectUnique))))
a1c_pace <- MakeFPCAInputs(a1c$SubjectUnique,a1c$CollectionDate,a1c$A1C)
a1c_fpca <- FPCA(a1c_pace$Ly,a1c_pace$Lt,list(plot = TRUE, userBwCov=2,userBwMu=10,methodMuCovEst = 'smooth',nRegGrid = length(unique(cytok$CollectionDate)),maxK = 30))
a1c_reconstruct <- a1c_fpca$xiEst %*%  t(a1c_fpca$phi)# + sapply(a1c_fpca$mu,function(x) rep(x,length(unique(a1c$SubjectUnique))))
nbasis <- 5
sorted_times <- sort(unique(unlist(microb_pace$Lt)))
mbasis <-  create.bspline.basis(c(sorted_times[1],sorted_times[length(sorted_times)]),nbasis)
mdbs2 <- ReMFPCA::Basismfd(mbasis)
microb_res <- ReMFPCA::Mfd(X = t(microb_reconstruct),mdbs = mdbs2)
sorted_times <- sort(unique(unlist(protein_pace$Lt)))
mbasis <-  create.bspline.basis(c(sorted_times[1],sorted_times[length(sorted_times)]),nbasis)
mdbs2 <- ReMFPCA::Basismfd(mbasis)
protein_res <- ReMFPCA::Mfd(X = t(protein_reconstruct),mdbs = mdbs2)
sorted_times <- sort(unique(unlist(cytok_pace$Lt)))
mbasis <-  create.bspline.basis(c(sorted_times[1],sorted_times[length(sorted_times)]),nbasis)
mdbs2 <- ReMFPCA::Basismfd(mbasis)
cytok_res <- ReMFPCA::Mfd(X = t(cytok_reconstruct),mdbs = mdbs2)
sorted_times <- sort(unique(unlist(a1c_pace$Lt)))
mbasis <-  create.bspline.basis(c(sorted_times[1],sorted_times[length(sorted_times)]),nbasis)
mdbs2 <- ReMFPCA::Basismfd(mbasis)
a1c_res <- ReMFPCA::Mfd(X = t(a1c_reconstruct),mdbs = mdbs2)
alpha1 <- list(a1=2^seq(-35,5,length.out=10),a2=2^seq(-35,5,length.out=10),a3=2^seq(-35,5,length.out=10),a4=2^seq(-35,5,length.out=10))
mvmfd_obj = ReMFPCA::Mvmfd(list(microb_res,protein_res,cytok_res,a1c_res))
res_mult = ReMFPCA::Remfpca(mvmfd_obj = mvmfd_obj, centerfns = T, ncomp = 3,alpha = alpha1,penalty_type = "coefpen")
res_mult$alpha
res_mult$values
sum(res_mult$values)/res_mult$values
(res_mult$values)/sum(res_mult$values)
microb_mean <- res_mult$mean_mfd[,1]$eval(list(sorted_times))
protein_mean <- res_mult$mean_mfd[,2]$eval(list(sorted_times))
cytok_mean <- res_mult$mean_mfd[,3]$eval(list(sorted_times))
a1c_mean <- res_mult$mean_mfd[,4]$eval(list(sorted_times))
microb_fpc <- res_mult$pc_mfd[,1]$eval(list(sorted_times))
protein_fpc <- res_mult$pc_mfd[,2]$eval(list(sorted_times))
cytok_fpc <- res_mult$pc_mfd[,3]$eval(list(sorted_times))
a1c_fpc <- res_mult$pc_mfd[,4]$eval(list(sorted_times))
fpc_list <- vector("list",3)
names(fpc_list) <- c("fpc1","fpc2","fpc3")
#alpha <- 12
alpha <- 20
for (i in 1:3) {
fpc_list[[i]] <- vector("list",4)
names(fpc_list[[i]]) <- c("microb","protein","cytok","a1c")
fpc_list[[i]][[1]] <- cbind(microb_mean,alpha*microb_fpc[,i] + microb_mean, -microb_fpc[,i]*alpha + microb_mean,sorted_times) |> as.data.table()
colnames(fpc_list[[i]][[1]]) <- c("mean","fpc_os","fpc_neg","sorted_times")
fpc_list[[i]][[1]] <- melt(fpc_list[[i]][[1]],4)
fpc_list[[i]][[2]] <- cbind(protein_mean,alpha*protein_fpc[,i] + protein_mean, -protein_fpc[,i]*alpha + protein_mean,sorted_times) |> as.data.table()
colnames(fpc_list[[i]][[2]]) <- c("mean","fpc_pos","fpc_neg","sorted_times")
fpc_list[[i]][[2]] <- melt(fpc_list[[i]][[2]],4)
fpc_list[[i]][[3]] <- cbind(cytok_mean,alpha*cytok_fpc[,i] + cytok_mean, -cytok_fpc[,i]*alpha + cytok_mean,sorted_times) |> as.data.table()
colnames(fpc_list[[i]][[3]]) <- c("mean","fpc_pos","fpc_neg","sorted_times")
fpc_list[[i]][[3]] <- melt(fpc_list[[i]][[3]],4)
fpc_list[[i]][[4]] <- cbind(a1c_mean,alpha*a1c_fpc[,i] + a1c_mean, -a1c_fpc[,i]*alpha + a1c_mean,sorted_times) |> as.data.table()
colnames(fpc_list[[i]][[4]]) <- c("mean","fpc_pos","fpc_neg","sorted_times")
fpc_list[[i]][[4]] <- melt(fpc_list[[i]][[4]],4)
}
p1_microb <- ggplot(data = fpc_list[[1]][[1]], aes(x = sorted_times, y = value, color = variable)) +
geom_line(linewidth = .7) +
labs(x = "time", y = "shannon", color = "Legend Title") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggtitle( toString(paste(names(fpc_list[[1]])[1],names(fpc_list)[1])))
p2_microb <- ggplot(data = fpc_list[[2]][[1]], aes(x = sorted_times, y = value, color = variable)) +
geom_line(linewidth = .7) +
labs(x = "time", y = "shannon", color = "Legend Title") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggtitle( toString(paste(names(fpc_list[[2]])[1],names(fpc_list)[2])))
p3_microb <- ggplot(data = fpc_list[[3]][[1]], aes(x = sorted_times, y = value, color = variable)) +
geom_line(linewidth = .7) +
labs(x = "time", y = "shannon", color = "Legend Title") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggtitle( toString(paste(names(fpc_list[[3]])[1],names(fpc_list)[3])))
figure_microb <- ggarrange(p1_microb, p2_microb, p3_microb,
ncol = 1, nrow = 3)
figure_microb
p1_protein <- ggplot(data = fpc_list[[1]][[2]], aes(x = sorted_times, y = value, color = variable)) +
geom_line(linewidth = .7) +
labs(x = "time", y = "shannon", color = "Legend Title") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggtitle( toString(paste(names(fpc_list[[1]])[2],names(fpc_list)[1])))
p2_protein <- ggplot(data = fpc_list[[2]][[2]], aes(x = sorted_times, y = value, color = variable)) +
geom_line(linewidth = .7) +
labs(x = "time", y = "shannon", color = "Legend Title") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggtitle( toString(paste(names(fpc_list[[2]])[2],names(fpc_list)[2])))
p3_protein <- ggplot(data = fpc_list[[3]][[2]], aes(x = sorted_times, y = value, color = variable)) +
geom_line(linewidth = .7) +
labs(x = "time", y = "shannon", color = "Legend Title") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggtitle( toString(paste(names(fpc_list[[3]])[2],names(fpc_list)[3])))
figure_protein <- ggarrange(p1_protein, p2_protein, p3_protein,
ncol = 1, nrow = 3)
figure_protein
p1_cytok <- ggplot(data = fpc_list[[1]][[3]], aes(x = sorted_times, y = value, color = variable)) +
geom_line(linewidth = .7) +
labs(x = "time", y = "shannon", color = "Legend Title") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggtitle( toString(paste(names(fpc_list[[1]])[3],names(fpc_list)[1])))
p2_cytok <- ggplot(data = fpc_list[[2]][[3]], aes(x = sorted_times, y = value, color = variable)) +
geom_line(linewidth = .7) +
labs(x = "time", y = "shannon", color = "Legend Title") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggtitle( toString(paste(names(fpc_list[[2]])[3],names(fpc_list)[2])))
p3_cytok <- ggplot(data = fpc_list[[3]][[3]], aes(x = sorted_times, y = value, color = variable)) +
geom_line(linewidth = .7) +
labs(x = "time", y = "shannon", color = "Legend Title") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggtitle( toString(paste(names(fpc_list[[3]])[3],names(fpc_list)[3])))
figure_cytok <- ggarrange(p1_cytok, p2_cytok, p3_cytok,
ncol = 1, nrow = 3)
figure_cytok
p1_a1c <- ggplot(data = fpc_list[[1]][[4]], aes(x = sorted_times, y = value, color = variable)) +
geom_line(linewidth = .7) +
labs(x = "time", y = "shannon", color = "Legend Title") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggtitle( toString(paste(names(fpc_list[[1]])[4],names(fpc_list)[1])))
p2_a1c <- ggplot(data = fpc_list[[2]][[4]], aes(x = sorted_times, y = value, color = variable)) +
geom_line(linewidth = .7) +
labs(x = "time", y = "shannon", color = "Legend Title") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggtitle( toString(paste(names(fpc_list[[2]])[4],names(fpc_list)[2])))
p3_a1c<- ggplot(data = fpc_list[[3]][[4]], aes(x = sorted_times, y = value, color = variable)) +
geom_line(linewidth = .7) +
labs(x = "time", y = "shannon", color = "Legend Title") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggtitle( toString(paste(names(fpc_list[[3]])[4],names(fpc_list)[3])))
figure_a1c <- ggarrange(p1_a1c, p2_a1c, p3_a1c,
ncol = 1, nrow = 3)
figure_a1c
# inprod analysis ---------------------------------------------------------
vars <- c("microb","protein","cytok","a1c")
inner_prod <- matrix(0,nrow = 3, ncol = 4)
colnames(inner_prod) <- vars
rownames(inner_prod) <- paste0("fpc",1:3)
for (i in 1:ncol(inner_prod)) {
inner_prod[,i] <- inprod_mfd(res_mult$pc_mfd[,i],res_mult$pc_mfd[,i]) |> diag()
}
inner_prod
apply(microb_reconstruct,2,sd)
microb_fpca$mu
class(microb_fpca)
methods(class = "FPCA")
kkk <- predict(microb_fpca,newLy = microb_pace$Ly,newLt = microb_pace$Lt,K = )
microb_fpca$phi |> dim()
kkk <- predict(microb_fpca,newLy = microb_pace$Ly,newLt = microb_pace$Lt,K = 30)
all.equal(kkk,microb_reconstruct)
microb_reconstruct <- microb_fpca$xiEst %*%  t(microb_fpca$phi) + sapply(microb_fpca$mu,function(x) rep(x,length(unique(microb$SubjectUnique))))
all.equal(kkk,microb_reconstruct)
all.equal(kkk$predCurves,microb_reconstruct)
kkk$predCurves |> dim()
microb
setwd("C:/Users/soroush/OneDrive - Marquette University/Soroush/test/soroush_draftibd")
runApp()
kkk <- readRDS("../../../Downloads/gwid_data_files.rda")
kkk <- readRDS("../../../../Downloads/gwid_data_files.rda")
kkk$hap_str
kkk$hap_str |> plot()
kkk$hap_str
fish_test_gwid |> plot()
fish_test_gwid |> class()
kkk$fish_test_gwid |> class()
plot(kkk$fish_test_gwid)
runApp()
library(gwid)
1
library(gwid)
gwid:::run_shiny(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
?HTML
library(gwid)
gwid:::run_shiny(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
library(gwid)
gwid:::launch_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
library(gwid)
gwid:::launch_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
system.file("gwid_shiny",package = "gwid")
system.file("gwid_shiny",package = "gwid",local=T)
?system.file
system.file(package = "stats")
system.file(package = "gwid")
system.file("gwid_shiny.R",package = "gwid")
system.file("gwid_shiny.R",package = "gwid",local=T)
system.file("gwid_shiny.R",package = "gwid",local=TRUE)
system.file("build.R",package = "gwid",local=TRUE)
system.file("build.R",package = "gwid")
system.file("build.R",package = "gwid")
system.file(package = "gwid")
system.file("build.R",package = "gwid")
system.file("gwid_shiny.R",package = "gwid")
system.file("gwid_shiny.R",package = "gwid",chdir=T)
system.file("gwid_shiny.R",package = "gwid")
source(system.file("gwid_shiny.R",package = "gwid"))
system.file("select.R",package = "dplyr")
system.file(package = "dplyr")
system.file(package = "dplyr",local=T)
system.file(package = "dplyr",local=T,chr=T)
gwid:::launch_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
library(gwid)
gwid:::launch_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
1
library(gwid)
1
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
library(gwid)
1
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
library(gwid)
1
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
HTML("body { max-width: 1250px !important; }")
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
install.packages("htmltools")
install.packages("htmltools")
install.packages(c("brew", "brio", "checkmate", "cli", "clue", "cowplot", "credentials", "curl", "data.table", "dbplyr", "deldir", "DEoptimR", "desc", "deSolve", "dotCall64", "dplyr", "DT", "emmeans", "expm", "fansi", "fastICA", "filelock", "forecast", "gert", "ggplot2", "ggrepel", "ggridges", "gtools", "haven", "Hmisc", "htmlTable", "httpuv", "igraph", "interp", "JADE", "jsonlite", "kSamples", "later", "lme4", "maps", "markdown", "Matrix", "MatrixModels", "matrixStats", "mclust", "metap", "minqa", "multicool", "mvtnorm", "nleqslv", "nor1mix", "pcaPP", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "posterior", "pracma", "prettyunits", "processx", "progress", "purrr", "QuickJSR", "R.utils", "ragg", "rbibutils", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "rematch", "Rfssa", "rgl", "rlang", "robustbase", "rprojroot", "RSQLite", "rstan", "sandwich", "sass", "shiny", "spam", "stringi", "svd", "systemfonts", "tensorA", "testthat", "textshaping", "timeDate", "tseries", "TTR", "utf8", "vctrs", "vroom", "waldo", "XML", "xml2", "yaml"))
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
library(gwid)
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
devtools::load_all("C:/Users/soroush/OneDrive - Marquette University/Soroush/gwid")
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
devtools::load_all("C:/Users/soroush/OneDrive - Marquette University/Soroush/gwid")
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
?plotly::renderPlotly
?plotly::renderPlotly
devtools::load_all("C:/Users/soroush/OneDrive - Marquette University/Soroush/gwid")
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
devtools::load_all("C:/Users/soroush/OneDrive - Marquette University/Soroush/gwid")
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
devtools::load_all("C:/Users/soroush/OneDrive - Marquette University/Soroush/gwid")
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
devtools::load_all("C:/Users/soroush/OneDrive - Marquette University/Soroush/gwid")
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
library(gwid)
1
devtools::load_all("C:/Users/soroush/OneDrive - Marquette University/Soroush/gwid")
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
devtools::load_all("C:/Users/soroush/OneDrive - Marquette University/Soroush/gwid")
library(gwid)
devtools::load_all("C:/Users/soroush/OneDrive - Marquette University/Soroush/gwid")
devtools::load_all("C:/Users/soroush/OneDrive - Marquette University/Soroush/gwid")
gwid:::my_shiny_app(data_folder_address = "./",caco_file_name = "case-cont-RA.withmap.Rda")
